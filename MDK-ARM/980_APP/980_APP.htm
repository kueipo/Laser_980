<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\980_APP\980_APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\980_APP\980_APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Apr 28 09:09:21 2024
<BR><P>
<H3>Maximum Stack Usage =        752 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[70]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[58]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">BusFault_Handler</a><BR>
 <LI><a href="#[56]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">HardFault_Handler</a><BR>
 <LI><a href="#[57]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">MemManage_Handler</a><BR>
 <LI><a href="#[55]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">NMI_Handler</a><BR>
 <LI><a href="#[59]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">UsageFault_Handler</a><BR>
 <LI><a href="#[1d6]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d6]">UART_EndTxTransfer</a><BR>
 <LI><a href="#[1d7]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d7]">UART_EndRxTransfer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">AC_Console</a> from task_console.o(i.AC_Console) referenced 2 times from task_console.o(.data)
 <LI><a href="#[70]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8d]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9e]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[a0]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[9f]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[18]">APP_Fan_Task</a> from app_fan.o(i.APP_Fan_Task) referenced 2 times from task.o(.data)
 <LI><a href="#[48]">APP_LaserRunning</a> from app_operate.o(i.APP_LaserRunning) referenced 2 times from task_devicerun.o(.data)
 <LI><a href="#[5]">APP_Mos_Task</a> from app_mos.o(i.APP_Mos_Task) referenced 2 times from task_devicedetection.o(.data)
 <LI><a href="#[52]">APP_Protect_RefreshCurrent</a> from app_protect.o(i.APP_Protect_RefreshCurrent) referenced 2 times from task_protect.o(.data)
 <LI><a href="#[53]">APP_Protect_RefreshPulseWidth</a> from app_protect.o(i.APP_Protect_RefreshPulseWidth) referenced 2 times from task_protect.o(.data)
 <LI><a href="#[19]">APP_Protect_Task</a> from app_protect.o(i.APP_Protect_Task) referenced 2 times from task.o(.data)
 <LI><a href="#[49]">APP_SafeGuard</a> from app_operate.o(i.APP_SafeGuard) referenced 2 times from task_devicerun.o(.data)
 <LI><a href="#[4]">APP_SafeLocker_Task</a> from app_safelocker.o(i.APP_SafeLocker_Task) referenced 2 times from task_devicedetection.o(.data)
 <LI><a href="#[6]">APP_VoltageDetection_Task</a> from app_voltagedetection.o(i.APP_VoltageDetection_Task) referenced 2 times from task_devicedetection.o(.data)
 <LI><a href="#[2d]">App_GetLaserInfo</a> from task_feedback.o(i.App_GetLaserInfo) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[30]">App_GetVersion</a> from task_feedback.o(i.App_GetVersion) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[2f]">App_ProductDate</a> from task_feedback.o(i.App_ProductDate) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[20]">App_SetHandpiecePROT</a> from task_feedback.o(i.App_SetHandpiecePROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[26]">App_SetKeyDelay</a> from task_feedback.o(i.App_SetKeyDelay) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[2c]">App_SetLaserCount</a> from task_feedback.o(i.App_SetLaserCount) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[24]">App_SetLaserFrequency</a> from task_feedback.o(i.App_SetLaserFrequency) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[2a]">App_SetLaserIndicatorPower</a> from task_feedback.o(i.App_SetLaserIndicatorPower) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[27]">App_SetLaserModeOpt</a> from task_feedback.o(i.App_SetLaserModeOpt) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[29]">App_SetLaserNum</a> from task_feedback.o(i.App_SetLaserNum) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[25]">App_SetLaserPower</a> from task_feedback.o(i.App_SetLaserPower) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[23]">App_SetLaserPulse</a> from task_feedback.o(i.App_SetLaserPulse) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[22]">App_SetLaserPulseWidth</a> from task_feedback.o(i.App_SetLaserPulseWidth) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[28]">App_SetLed</a> from task_feedback.o(i.App_SetLed) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[1d]">App_SetOverTempPROT</a> from task_feedback.o(i.App_SetOverTempPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[21]">App_SetSafeLockerPROT</a> from task_feedback.o(i.App_SetSafeLockerPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[1c]">App_SetSystemReady</a> from task_feedback.o(i.App_SetSystemReady) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[1e]">App_SetTempTH</a> from task_feedback.o(i.App_SetTempTH) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[1f]">App_SetWaterFlowPROT</a> from task_feedback.o(i.App_SetWaterFlowPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[2b]">App_SetWorkTime</a> from task_feedback.o(i.App_SetWorkTime) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[31]">App_SystemReboot</a> from task_feedback.o(i.App_SystemReboot) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[2e]">App_Updata</a> from task_feedback.o(i.App_Updata) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[58]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[73]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[74]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6d]">DMA1_Channel5_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[96]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[97]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[98]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[99]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[86]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[75]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8e]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[ac]">HCI_KeyProcCallback</a> from app_callback.o(i.HCI_KeyProcCallback) referenced 2 times from app_key.o(.constdata)
 <LI><a href="#[56]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7e]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7d]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[80]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7f]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">Main_Console</a> from task_console.o(i.Main_Console) referenced 2 times from task_console.o(.data)
 <LI><a href="#[57]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">Protect_Console</a> from task_console.o(i.Protect_Console) referenced 2 times from task_console.o(.data)
 <LI><a href="#[4c]">Protect_Error</a> from task_fb_protect.o(i.Protect_Error) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[4f]">Protect_FB_Error</a> from task_fb_protect.o(i.Protect_FB_Error) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[50]">Protect_FB_Updata</a> from task_fb_protect.o(i.Protect_FB_Updata) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[51]">Protect_FB_Version</a> from task_fb_protect.o(i.Protect_FB_Version) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[4d]">Protect_Updata</a> from task_fb_protect.o(i.Protect_Updata) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[4e]">Protect_Version</a> from task_fb_protect.o(i.Protect_Version) referenced 2 times from task_fb_protect.o(.data)
 <LI><a href="#[63]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[87]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8f]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[81]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[82]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[91]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">SendACVoltage</a> from task_heartbeatmessage.o(i.SendACVoltage) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[b]">SendDC05Info</a> from task_heartbeatmessage.o(i.SendDC05Info) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[c]">SendDC12Info</a> from task_heartbeatmessage.o(i.SendDC12Info) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[d]">SendDCLdInfo</a> from task_heartbeatmessage.o(i.SendDCLdInfo) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[7]">SendErrorInfo</a> from task_heartbeatmessage.o(i.SendErrorInfo) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[4a]">SendLaserCount</a> from task_polityhigh.o(i.SendLaserCount) referenced 2 times from task_polityhigh.o(.data)
 <LI><a href="#[e]">SendMosTemperature</a> from task_heartbeatmessage.o(i.SendMosTemperature) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[9]">SendSafeLockerInfor</a> from task_heartbeatmessage.o(i.SendSafeLockerInfor) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[4b]">SendTime</a> from task_polityhigh.o(i.SendTime) referenced 2 times from task_polityhigh.o(.data)
 <LI><a href="#[8]">SendVersion</a> from task_heartbeatmessage.o(i.SendVersion) referenced 2 times from task_heartbeatmessage.o(.data)
 <LI><a href="#[5d]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9a]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[60]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[76]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[79]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[78]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[77]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7a]">TIM2_IRQHandler</a> from stm32f1xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7b]">TIM3_IRQHandler</a> from stm32f1xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7c]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[90]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[94]">TIM6_IRQHandler</a> from stm32f1xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[95]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[89]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8c]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8a]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">Task_Console</a> from task_console.o(i.Task_Console) referenced 2 times from task.o(.data)
 <LI><a href="#[43]">Task_FB_GetLaserInfo</a> from task_feedback.o(i.Task_FB_GetLaserInfo) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[46]">Task_FB_GetVersion</a> from task_feedback.o(i.Task_FB_GetVersion) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[15]">Task_FB_Pro_Handler_Callback</a> from task_feedback.o(i.Task_FB_Pro_Handler_Callback) referenced 2 times from task.o(.data)
 <LI><a href="#[45]">Task_FB_ProductDate</a> from task_feedback.o(i.Task_FB_ProductDate) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[1a]">Task_FB_Protect_Handler_Callback</a> from task_fb_protect.o(i.Task_FB_Protect_Handler_Callback) referenced 2 times from task.o(.data)
 <LI><a href="#[36]">Task_FB_SetHandpiecePROT</a> from task_feedback.o(i.Task_FB_SetHandpiecePROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3c]">Task_FB_SetKeyDelay</a> from task_feedback.o(i.Task_FB_SetKeyDelay) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[42]">Task_FB_SetLaserCount</a> from task_feedback.o(i.Task_FB_SetLaserCount) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3a]">Task_FB_SetLaserFrequency</a> from task_feedback.o(i.Task_FB_SetLaserFrequency) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[40]">Task_FB_SetLaserIndicatorPower</a> from task_feedback.o(i.Task_FB_SetLaserIndicatorPower) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3d]">Task_FB_SetLaserMode</a> from task_feedback.o(i.Task_FB_SetLaserMode) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3f]">Task_FB_SetLaserNum</a> from task_feedback.o(i.Task_FB_SetLaserNum) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3b]">Task_FB_SetLaserPower</a> from task_feedback.o(i.Task_FB_SetLaserPower) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[38]">Task_FB_SetLaserPulse</a> from task_feedback.o(i.Task_FB_SetLaserPulse) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[39]">Task_FB_SetLaserPulseWidth</a> from task_feedback.o(i.Task_FB_SetLaserPulseWidth) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[3e]">Task_FB_SetLed</a> from task_feedback.o(i.Task_FB_SetLed) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[33]">Task_FB_SetOverTempPROT</a> from task_feedback.o(i.Task_FB_SetOverTempPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[37]">Task_FB_SetSafeLockerPROT</a> from task_feedback.o(i.Task_FB_SetSafeLockerPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[32]">Task_FB_SetSystemReady</a> from task_feedback.o(i.Task_FB_SetSystemReady) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[34]">Task_FB_SetTempTH</a> from task_feedback.o(i.Task_FB_SetTempTH) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[35]">Task_FB_SetWaterFlowPROT</a> from task_feedback.o(i.Task_FB_SetWaterFlowPROT) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[41]">Task_FB_SetWorkTime</a> from task_feedback.o(i.Task_FB_SetWorkTime) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[47]">Task_FB_SystemReboot</a> from task_feedback.o(i.Task_FB_SystemReboot) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[44]">Task_FB_Updata</a> from task_feedback.o(i.Task_FB_Updata) referenced 2 times from task_feedback.o(.data)
 <LI><a href="#[12]">Task_Heartbeat_Message</a> from task_heartbeatmessage.o(i.Task_Heartbeat_Message) referenced 2 times from task.o(.data)
 <LI><a href="#[1b]">Task_PolityHigh</a> from task_polityhigh.o(i.Task_PolityHigh) referenced 2 times from task.o(.data)
 <LI><a href="#[17]">Task_Protect</a> from task_protect.o(i.Task_Protect) referenced 2 times from task.o(.data)
 <LI><a href="#[13]">Task_SystemDetection</a> from task_devicedetection.o(i.Task_SystemDetection) referenced 2 times from task.o(.data)
 <LI><a href="#[16]">Task_SystemRun</a> from task_devicerun.o(i.Task_SystemRun) referenced 2 times from task.o(.data)
 <LI><a href="#[92]">UART4_IRQHandler</a> from stm32f1xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[93]">UART5_IRQHandler</a> from stm32f1xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a3]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[a1]">UART_DMAReceiveCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[a2]">UART_DMARxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[83]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[84]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[85]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[88]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[71]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b1]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[9c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a5]">alloc_env_cb</a> from ef_env.o(i.alloc_env_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[a8]">check_and_recovery_env_cb</a> from ef_env.o(i.check_and_recovery_env_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[a7]">check_and_recovery_gc_cb</a> from ef_env.o(i.check_and_recovery_gc_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[a6]">check_sec_hdr_cb</a> from ef_env.o(i.check_sec_hdr_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[ab]">do_gc</a> from ef_env.o(i.do_gc) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[b0]">erase</a> from fal_flash_stm32_port.o(i.erase) referenced from fal_flash_stm32_port.o(.constdata)
 <LI><a href="#[a9]">find_env_cb</a> from ef_env.o(i.find_env_cb) referenced from ef_env.o(i.find_env_no_cache)
 <LI><a href="#[9d]">fputc</a> from bsp_common.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[aa]">gc_check_cb</a> from ef_env.o(i.gc_check_cb) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[ad]">init</a> from fal_flash_stm32_port.o(i.init) referenced from fal_flash_stm32_port.o(.constdata)
 <LI><a href="#[ae]">read</a> from fal_flash_stm32_port.o(i.read) referenced from fal_flash_stm32_port.o(.constdata)
 <LI><a href="#[a4]">sector_statistics_cb</a> from ef_env.o(i.sector_statistics_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[af]">write</a> from fal_flash_stm32_port.o(i.write) referenced from fal_flash_stm32_port.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b2]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[210]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[211]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[212]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[213]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[214]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[215]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[216]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[217]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[218]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[219]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[222]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[223]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[224]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[225]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[226]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[227]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[228]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[229]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[22b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[230]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[231]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[232]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b3]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[233]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[234]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[235]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[236]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[54]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[237]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[238]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[d4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b6]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1ea]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[204]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[ca]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[239]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[ce]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[cd]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d0]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[209]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>

<P><STRONG><a name="[23c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d5]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c5]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[245]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[9e]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[a0]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[e5]"></a>ADC_Enable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[e6]"></a>APP_Buzzer_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_buzzer.o(i.APP_Buzzer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = APP_Buzzer_Config &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Init
</UL>

<P><STRONG><a name="[e8]"></a>APP_Buzzer_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_buzzer.o(i.APP_Buzzer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = APP_Buzzer_Init &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[eb]"></a>APP_Buzzer_Long</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_buzzer.o(i.APP_Buzzer_Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = APP_Buzzer_Long &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
</UL>

<P><STRONG><a name="[ec]"></a>APP_Buzzer_Task</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_buzzer.o(i.APP_Buzzer_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Buzzer_Task &rArr; APP_Buzzer_Config &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeProc
</UL>

<P><STRONG><a name="[f6]"></a>APP_Factory_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_factory.o(i.APP_Factory_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[fa]"></a>APP_Fan_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_fan.o(i.APP_Fan_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[18]"></a>APP_Fan_Task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_fan.o(i.APP_Fan_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Fan_Task &rArr; BSP_Fan_Task &rArr; BSP_Fan_CaptureStart &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Task
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadMosTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>APP_Handpiece_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_handpiece.o(i.APP_Handpiece_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_Handpiece_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[f0]"></a>APP_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_common.o(i.APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = APP_Init &rArr; APP_LED_Init &rArr; APP_LED_Config &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeLocker_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Mos_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handpiece_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Fan_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Factory_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>APP_IsLaserRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_operate.o(i.APP_IsLaserRunning))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshRun
</UL>

<P><STRONG><a name="[123]"></a>APP_IsSafeLockErr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_safelocker.o(i.APP_IsSafeLockErr))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeGuard
</UL>

<P><STRONG><a name="[121]"></a>APP_IsSystemReady</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_operate.o(i.APP_IsSystemReady))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetSystemReady
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshReady
</UL>

<P><STRONG><a name="[131]"></a>APP_KEY_DelayConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_key.o(i.APP_KEY_DelayConfig))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetKeyDelay
</UL>

<P><STRONG><a name="[f2]"></a>APP_KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_key.o(i.APP_KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_KEY_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[fb]"></a>APP_KEY_IsPress</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, app_key.o(i.APP_KEY_IsPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = APP_KEY_IsPress
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Key_ReadVal
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemReady
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRunning
</UL>

<P><STRONG><a name="[fd]"></a>APP_KEY_Task</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_key.o(i.APP_KEY_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_KeyState
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeProc
</UL>

<P><STRONG><a name="[fc]"></a>APP_Key_ReadVal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_key.o(i.APP_Key_ReadVal))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_IsPress
</UL>

<P><STRONG><a name="[ff]"></a>APP_LED_AllConfig</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, app_led.o(i.APP_LED_AllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = APP_LED_AllConfig &rArr; APP_LED_Config &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLed
</UL>

<P><STRONG><a name="[100]"></a>APP_LED_Config</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_led.o(i.APP_LED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = APP_LED_Config &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_AllConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
</UL>

<P><STRONG><a name="[102]"></a>APP_LED_ConfigColor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_led.o(i.APP_LED_ConfigColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = APP_LED_ConfigColor &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLed
</UL>

<P><STRONG><a name="[f4]"></a>APP_LED_Init</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, app_led.o(i.APP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = APP_LED_Init &rArr; APP_LED_Config &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_ConfigColor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[105]"></a>APP_LED_Task</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, app_led.o(i.APP_LED_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = APP_LED_Task &rArr; BSP_Led_Operate &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_TimeProc
</UL>

<P><STRONG><a name="[106]"></a>APP_LED_TimeProc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_led.o(i.APP_LED_TimeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = APP_LED_TimeProc &rArr; APP_LED_Task &rArr; BSP_Led_Operate &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Heartbeat_Message
</UL>

<P><STRONG><a name="[107]"></a>APP_LaserCountCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_operate.o(i.APP_LaserCountCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_LaserCountCallback &rArr; APP_SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendLaserCount
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>

<P><STRONG><a name="[1ce]"></a>APP_LaserReadPulse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_LaserReadPulse))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPulse
</UL>

<P><STRONG><a name="[1cf]"></a>APP_LaserReadPulseWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_LaserReadPulseWidth))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPulseWidth
</UL>

<P><STRONG><a name="[48]"></a>APP_LaserRunning</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_operate.o(i.APP_LaserRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = APP_LaserRunning &rArr; APP_Laser_OutEnable &rArr; APP_Buzzer_Long &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshRun
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_IsPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_devicerun.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>APP_Laser_EnergyReady</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_EnergyReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = APP_Laser_EnergyReady &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteEnergy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefreshMedical
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemReady
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_Init
</UL>

<P><STRONG><a name="[1cd]"></a>APP_Laser_IndicatorReadEnergy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_IndicatorReadEnergy))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserIndicatorPower
</UL>

<P><STRONG><a name="[112]"></a>APP_Laser_IndicatorWriteEnergy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_IndicatorWriteEnergy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Laser_IndicatorWriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserIndicatorPower
</UL>

<P><STRONG><a name="[f5]"></a>APP_Laser_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = APP_Laser_Init &rArr; APP_Laser_EnergyReady &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteMode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_IndicatorWriteEnergy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_EnergyReady
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[10d]"></a>APP_Laser_OutEnable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_OutEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = APP_Laser_OutEnable &rArr; APP_Buzzer_Long &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Enable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Disable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Long
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadPulseMode
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRunning
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_Init
</UL>

<P><STRONG><a name="[11e]"></a>APP_Laser_ReadEnergy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_ReadEnergy))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshCurrent
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPower
</UL>

<P><STRONG><a name="[11f]"></a>APP_Laser_ReadFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_ReadFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshPulseWidth
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserFrequency
</UL>

<P><STRONG><a name="[115]"></a>APP_Laser_ReadPulseMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_ReadPulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshPulseWidth
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserMode
</UL>

<P><STRONG><a name="[110]"></a>APP_Laser_WriteEnergy</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_WriteEnergy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_EnergyReady
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPower
</UL>

<P><STRONG><a name="[116]"></a>APP_Laser_WriteFrequency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_WriteFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_Laser_WriteFrequency &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserFrequency
</UL>

<P><STRONG><a name="[113]"></a>APP_Laser_WriteMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_laser.o(i.APP_Laser_WriteMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_Laser_WriteMode &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserModeOpt
</UL>

<P><STRONG><a name="[117]"></a>APP_Laser_WritePulse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_WritePulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APP_Laser_WritePulse &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPulse
</UL>

<P><STRONG><a name="[118]"></a>APP_Laser_WritePulseWidth</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_laser.o(i.APP_Laser_WritePulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = APP_Laser_WritePulseWidth &rArr; APP_LaserRefreshMedical &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefreshMedical
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPulseWidth
</UL>

<P><STRONG><a name="[f7]"></a>APP_Mos_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_mos.o(i.APP_Mos_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[5]"></a>APP_Mos_Task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_mos.o(i.APP_Mos_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_Mos_Task &rArr; MiddleAverageValueFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadADCVal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleAverageValueFilter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_devicedetection.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>APP_Protect_DC24Range</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_protect.o(i.APP_Protect_DC24Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_DC24Range &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_Task
</UL>

<P><STRONG><a name="[f9]"></a>APP_Protect_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_Init))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_WDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[1c3]"></a>APP_Protect_ReadVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_ReadVersion))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_FB_Version
</UL>

<P><STRONG><a name="[52]"></a>APP_Protect_RefreshCurrent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_protect.o(i.APP_Protect_RefreshCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_RefreshCurrent &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadEnergy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteEnergy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_protect.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>APP_Protect_RefreshPulseWidth</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_protect.o(i.APP_Protect_RefreshPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadPulseMode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadFrequency
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefreshMedical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_protect.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>APP_Protect_RefreshReady</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_protect.o(i.APP_Protect_RefreshReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_RefreshReady &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_IsSystemReady
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetSystemReady
</UL>

<P><STRONG><a name="[10e]"></a>APP_Protect_RefreshRun</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_protect.o(i.APP_Protect_RefreshRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_RefreshRun &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_IsLaserRunning
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRunning
</UL>

<P><STRONG><a name="[19]"></a>APP_Protect_Task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_Protect_Task &rArr; APP_Protect_DC24Range &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_DC24Range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d1]"></a>APP_Protect_WDG_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_WDG_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect
</UL>

<P><STRONG><a name="[11d]"></a>APP_Protect_WDG_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_WDG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_Init
</UL>

<P><STRONG><a name="[1cc]"></a>APP_Protect_WDG_Refresh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_WDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_Protect_Search
</UL>

<P><STRONG><a name="[1c2]"></a>APP_Protect_WriteErrorCode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_WriteErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Error
</UL>

<P><STRONG><a name="[1c4]"></a>APP_Protect_WriteVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_protect.o(i.APP_Protect_WriteVersion))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Version
</UL>

<P><STRONG><a name="[1c7]"></a>APP_ReadLaserCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_operate.o(i.APP_ReadLaserCount))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLaserCount
</UL>

<P><STRONG><a name="[ed]"></a>APP_ReadMosTemperature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_mos.o(i.APP_ReadMosTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMosTemperature
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Fan_Task
</UL>

<P><STRONG><a name="[1c8]"></a>APP_ReadSafeLockerConn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_safelocker.o(i.APP_ReadSafeLockerConn))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSafeLockerInfor
</UL>

<P><STRONG><a name="[128]"></a>APP_ReadTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_operate.o(i.APP_ReadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_ReadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendTime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTime
</UL>

<P><STRONG><a name="[49]"></a>APP_SafeGuard</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_operate.o(i.APP_SafeGuard))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = APP_SafeGuard &rArr; APP_SystemReady &rArr; APP_Laser_EnergyReady &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_IsError
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemReady
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_IsSafeLockErr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_devicerun.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>APP_SafeLocker_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_safelocker.o(i.APP_SafeLocker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_SafeLocker_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[4]"></a>APP_SafeLocker_Task</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_safelocker.o(i.APP_SafeLocker_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_SafeLocker_Task &rArr; BSP_SafeLockerValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SafeLockerValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_devicedetection.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>APP_SendLaserCount</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_operate.o(i.APP_SendLaserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserCountCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetLaserCount
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserCount
</UL>

<P><STRONG><a name="[127]"></a>APP_SendTime</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app_operate.o(i.APP_SendTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_SendTime &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeCallback
</UL>

<P><STRONG><a name="[11c]"></a>APP_Send_Data</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, app_common.o(i.APP_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxDataToID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshPulseWidth
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshCurrent
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshRun
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendLaserCount
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeGuard
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetSystemReady
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPulseWidth
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPulse
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserPower
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserMode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserIndicatorPower
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SetLaserFrequency
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_ProductDate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_GetVersion
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_GetLaserInfo
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLed
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSafeLockerInfor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMosTemperature
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDCLdInfo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDC12Info
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDC05Info
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendACVoltage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshReady
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_DC24Range
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_FB_Version
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTime
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLaserCount
</UL>

<P><STRONG><a name="[12a]"></a>APP_SetLaserCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_operate.o(i.APP_SetLaserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_SetLaserCount &rArr; APP_SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendLaserCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserCount
</UL>

<P><STRONG><a name="[12b]"></a>APP_SetTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_operate.o(i.APP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_SetTime &rArr; APP_SendTime &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetWorkTime
</UL>

<P><STRONG><a name="[125]"></a>APP_SystemReady</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_operate.o(i.APP_SystemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = APP_SystemReady &rArr; APP_Laser_EnergyReady &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_EnergyReady
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_IsPress
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeGuard
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetSystemReady
</UL>

<P><STRONG><a name="[12d]"></a>APP_TimeCallback</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_operate.o(i.APP_TimeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APP_TimeCallback &rArr; APP_SendTime &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeProc
</UL>

<P><STRONG><a name="[12e]"></a>APP_TimeProc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_common.o(i.APP_TimeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_Task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[f8]"></a>APP_VoltageDetection_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_voltagedetection.o(i.APP_VoltageDetection_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[124]"></a>APP_VoltageDetection_IsError</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_voltagedetection.o(i.APP_VoltageDetection_IsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_VoltageDetection_IsError
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeGuard
</UL>

<P><STRONG><a name="[1c6]"></a>APP_VoltageDetection_Read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_voltagedetection.o(i.APP_VoltageDetection_Read))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDCLdInfo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDC12Info
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDC05Info
</UL>

<P><STRONG><a name="[6]"></a>APP_VoltageDetection_Task</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_voltagedetection.o(i.APP_VoltageDetection_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_VoltageDetection_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadADCVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_devicedetection.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>APP_WriteHandpiecePROT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_handpiece.o(i.APP_WriteHandpiecePROT))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHandpiecePROT
</UL>

<P><STRONG><a name="[132]"></a>APP_WriteSafeLockerPROT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_safelocker.o(i.APP_WriteSafeLockerPROT))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetSafeLockerPROT
</UL>

<P><STRONG><a name="[1c0]"></a>App_Matching</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, task_feedback.o(i.App_Matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Matching
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Console
</UL>

<P><STRONG><a name="[136]"></a>BSP_Adc_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_adc.o(i.BSP_Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = BSP_Adc_Init &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[150]"></a>BSP_Buzzer_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_buzzer.o(i.BSP_Buzzer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[e7]"></a>BSP_Buzzer_Operate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_buzzer.o(i.BSP_Buzzer_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Long
</UL>

<P><STRONG><a name="[111]"></a>BSP_DAC_Config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_dac.o(i.BSP_DAC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteEnergy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_IndicatorWriteEnergy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_EnergyReady
</UL>

<P><STRONG><a name="[13d]"></a>BSP_DAC_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_dac.o(i.BSP_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = BSP_DAC_Init &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[13f]"></a>BSP_Fan_Capture</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_fan.o(i.BSP_Fan_Capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_Capture &rArr; HAL_TIM_ReadCapturedValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureStop
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[142]"></a>BSP_Fan_CaptureOverflow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_fan.o(i.BSP_Fan_CaptureOverflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_CaptureOverflow &rArr; BSP_Fan_CaptureStop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureStop
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ee]"></a>BSP_Fan_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bsp_fan.o(i.BSP_Fan_Config))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Fan_Task
</UL>

<P><STRONG><a name="[145]"></a>BSP_Fan_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_fan.o(i.BSP_Fan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_Init &rArr; BSP_Fan_Operate &rArr; HAL_TIMEx_PWMN_Start &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Operate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[146]"></a>BSP_Fan_Operate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bsp_fan.o(i.BSP_Fan_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_Operate &rArr; HAL_TIMEx_PWMN_Start &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Init
</UL>

<P><STRONG><a name="[ef]"></a>BSP_Fan_Task</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_fan.o(i.BSP_Fan_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_Task &rArr; BSP_Fan_CaptureStart &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureStart
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Fan_Task
</UL>

<P><STRONG><a name="[10b]"></a>BSP_Frenquency_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_frequency.o(i.BSP_Frenquency_Config))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefreshMedical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
</UL>

<P><STRONG><a name="[10a]"></a>BSP_Frenquency_Disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_frequency.o(i.BSP_Frenquency_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frequency_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefreshMedical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserRefresh
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
</UL>

<P><STRONG><a name="[114]"></a>BSP_Frenquency_Enable</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_frequency.o(i.BSP_Frenquency_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Frenquency_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_OutEnable
</UL>

<P><STRONG><a name="[149]"></a>BSP_Frequency_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_frequency.o(i.BSP_Frequency_Init))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[14e]"></a>BSP_Handpiece_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_handpiece.o(i.BSP_Handpiece_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[14a]"></a>BSP_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_common.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; BSP_Uart_Init &rArr; BSP_Uart_EnableDMA &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SafeLocker_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Handpiece_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frequency_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>BSP_Key_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_key.o(i.BSP_Key_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[103]"></a>BSP_Led_Config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_led.o(i.BSP_Led_Config))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_ConfigColor
</UL>

<P><STRONG><a name="[14f]"></a>BSP_Led_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_led.o(i.BSP_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = BSP_Led_Init &rArr; BSP_Led_Operate &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[101]"></a>BSP_Led_Operate</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bsp_led.o(i.BSP_Led_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = BSP_Led_Operate &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Task
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Config
</UL>

<P><STRONG><a name="[119]"></a>BSP_ReadADCVal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_adc.o(i.BSP_ReadADCVal))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Mos_Task
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_Task
</UL>

<P><STRONG><a name="[154]"></a>BSP_ReadKeyValue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_key.o(i.BSP_ReadKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_KeyState
</UL>

<P><STRONG><a name="[126]"></a>BSP_SafeLockerValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_safelocker.o(i.BSP_SafeLockerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BSP_SafeLockerValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SafeLocker_Task
</UL>

<P><STRONG><a name="[14d]"></a>BSP_SafeLocker_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_safelocker.o(i.BSP_SafeLocker_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[156]"></a>BSP_UART_GetBuff</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, bsp_uart.o(i.BSP_UART_GetBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_UART_GetBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IdSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>BSP_UART_GetBuffSize</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, bsp_uart.o(i.BSP_UART_GetBuffSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_UART_GetBuffSize
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IdSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>BSP_UART_IRQHandler</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, stm32f1xx_it.o(i.BSP_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BSP_UART_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RxData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Receive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_GetBuffSize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_GetBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>BSP_UART_IdSearch</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_UART_IdSearch))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RxData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_GetBuffSize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_GetBuff
</UL>

<P><STRONG><a name="[15a]"></a>BSP_UART_Receive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_UART_Receive &rArr; BSP_UART_RxData &rArr; RingBufferPut
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>BSP_UART_RxData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_UART_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_UART_RxData &rArr; RingBufferPut
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferPut
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IdSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Receive
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>BSP_UART_TxDataToID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_UART_TxDataToID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferPut
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>

<P><STRONG><a name="[15f]"></a>BSP_UART_TxStart</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_UART_TxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBufferLen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IdSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxDataToID
</UL>

<P><STRONG><a name="[164]"></a>BSP_Uart_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_Uart_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Init
</UL>

<P><STRONG><a name="[163]"></a>BSP_Uart_EnableDMA</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_Uart_EnableDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = BSP_Uart_EnableDMA &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Init
</UL>

<P><STRONG><a name="[14c]"></a>BSP_Uart_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BSP_Uart_Init &rArr; BSP_Uart_EnableDMA &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_EnableDMA
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[58]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>Enable_Feedback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_feedback.o(i.Enable_Feedback))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemReady
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SystemReboot
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetWorkTime
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetSystemReady
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetSafeLockerPROT
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPulseWidth
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPulse
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserPower
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserModeOpt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserIndicatorPower
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserFrequency
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetLaserCount
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetKeyDelay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProductDate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetVersion
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetLaserInfo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVersion
</UL>

<P><STRONG><a name="[170]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[178]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[168]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[dc]"></a>GetRingBufferLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ringbuffer.o(i.GetRingBufferLen))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferPut
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
</UL>

<P><STRONG><a name="[137]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Adc_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[16c]"></a>HAL_ADC_Init</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Adc_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f1xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_ConfigChannel &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_DAC_GetValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal_dac.o(i.HAL_DAC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_GetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
</UL>

<P><STRONG><a name="[173]"></a>HAL_DAC_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dac.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f1xx_hal_dac.o(i.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Config
</UL>

<P><STRONG><a name="[13e]"></a>HAL_DAC_Start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f1xx_hal_dac.o(i.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_DAC_Start &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DAC_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
</UL>

<P><STRONG><a name="[15b]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
</UL>

<P><STRONG><a name="[165]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_DMA_Init</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_DMA_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[171]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[176]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SystemReboot
</UL>

<P><STRONG><a name="[177]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_MassErase &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[203]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[179]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_SystemReboot
</UL>

<P><STRONG><a name="[17b]"></a>HAL_FLASH_Program</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_FLASH_Program &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[202]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[16e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 712 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[155]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadKeyValue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SafeLockerValue
</UL>

<P><STRONG><a name="[13a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Operate
</UL>

<P><STRONG><a name="[da]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Console
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Console
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Adc_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_EnableDMA
</UL>

<P><STRONG><a name="[184]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[183]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[189]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[187]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[186]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[18a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1150 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_OscConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[182]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Operate
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_TIMEx_PWMN_Stop &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Operate
</UL>

<P><STRONG><a name="[18e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; BSP_Fan_Capture &rArr; HAL_TIM_ReadCapturedValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Capture
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IC_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[19d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PWM_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback &rArr; APP_Buzzer_Config &rArr; BSP_Buzzer_Operate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserCountCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Operate
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Led_Operate
</UL>

<P><STRONG><a name="[19f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TimeProc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureOverflow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimeProc
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_ReadCapturedValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Capture
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_AbortTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_UART_MspInit</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_EnableDMA
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1db]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_UART_Transmit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
</UL>

<P><STRONG><a name="[ac]"></a>HCI_KeyProcCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_callback.o(i.HCI_KeyProcCallback))
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20f]"></a>Link_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(i.Link_Init))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>MX_ADC1_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>MX_DAC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_GPIO_Init</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>MX_TIM1_Init</STRONG> (Thumb, 194 bytes, Stack size 96 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>MX_TIM2_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MX_TIM3_Init</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>MX_TIM6_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_TIM8_Init</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, tim.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>MX_UART4_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>MX_UART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>MiddleAverageValueFilter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, filter.o(i.MiddleAverageValueFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MiddleAverageValueFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Mos_Task
</UL>

<P><STRONG><a name="[55]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>RingBufferClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ringbuffer.o(i.RingBufferClear))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
</UL>

<P><STRONG><a name="[e0]"></a>RingBufferEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ringbuffer.o(i.RingBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Console
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Console
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
</UL>

<P><STRONG><a name="[dd]"></a>RingBufferGet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ringbuffer.o(i.RingBufferGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufferGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxStart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Console
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Console
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
</UL>

<P><STRONG><a name="[160]"></a>RingBufferPut</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ringbuffer.o(i.RingBufferPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufferPut
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxDataToID
</UL>

<P><STRONG><a name="[5a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1ca]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>TIM6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; APP_TimeProc &rArr; APP_KEY_Task &rArr; Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[144]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureStop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>

<P><STRONG><a name="[192]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TIM_OC2_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[198]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[14]"></a>Task_Console</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task_console.o(i.Task_Console))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_Console
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>Task_FB_Marks_Handler_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, task_feedback.o(i.Task_FB_Marks_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_FB_Marks_Handler_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TimeProc
</UL>

<P><STRONG><a name="[15]"></a>Task_FB_Pro_Handler_Callback</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, task_feedback.o(i.Task_FB_Pro_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_FB_Pro_Handler_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>Task_FB_Protect_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_fb_protect.o(i.Task_FB_Protect_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetVersion
</UL>

<P><STRONG><a name="[1a]"></a>Task_FB_Protect_Handler_Callback</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, task_fb_protect.o(i.Task_FB_Protect_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_FB_Protect_Handler_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>Task_FB_Protect_Marks_Handler_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, task_fb_protect.o(i.Task_FB_Protect_Marks_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_FB_Protect_Marks_Handler_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TimeProc
</UL>

<P><STRONG><a name="[1c1]"></a>Task_FB_Protect_Search</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, task_fb_protect.o(i.Task_FB_Protect_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_FB_Protect_Search
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_WDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Console
</UL>

<P><STRONG><a name="[12]"></a>Task_Heartbeat_Message</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task_heartbeatmessage.o(i.Task_Heartbeat_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Task_Heartbeat_Message &rArr; APP_LED_TimeProc &rArr; APP_LED_Task &rArr; BSP_Led_Operate &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_TimeProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>Task_Marks_Handler_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, task.o(i.Task_Marks_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_Marks_Handler_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TimeProc
</UL>

<P><STRONG><a name="[1b]"></a>Task_PolityHigh</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, task_polityhigh.o(i.Task_PolityHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_PolityHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Pro_Handler_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>Task_Pro_Handler_Callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, task.o(i.Task_Pro_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_Pro_Handler_Callback &rArr; Task_PolityHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PolityHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>Task_Protect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_protect.o(i.Task_Protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_Protect
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_WDG_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1d4]"></a>Task_SysDete_Marks_Handler_Callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_devicedetection.o(i.Task_SysDete_Marks_Handler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_SysDete_Marks_Handler_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TimeProc
</UL>

<P><STRONG><a name="[13]"></a>Task_SystemDetection</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, task_devicedetection.o(i.Task_SystemDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_SystemDetection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Task_SystemRun</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_devicerun.o(i.Task_SystemRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_SystemRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1ab]"></a>Task_TimeProc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_common.o(i.Task_TimeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_TimeProc &rArr; Task_SysDete_Marks_Handler_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SysDete_Marks_Handler_Callback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Marks_Handler_Callback
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_Protect_Marks_Handler_Callback
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_Marks_Handler_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[92]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[83]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>Voltage_Extract</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, app_acvoltage.o(i.Voltage_Extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Voltage_Extract
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Console
</UL>

<P><STRONG><a name="[1c5]"></a>Voltage_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_acvoltage.o(i.Voltage_Read))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendACVoltage
</UL>

<P><STRONG><a name="[c8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c3]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[167]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_GetValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>

<P><STRONG><a name="[135]"></a>cf_Config_App_Flag</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, configflag.o(i.cf_Config_App_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cf_Config_App_Flag &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Updata
</UL>

<P><STRONG><a name="[1f6]"></a>easyflash_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, easyflash.o(i.easyflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>ef_calc_crc32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ef_utils.o(i.ef_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
</UL>

<P><STRONG><a name="[1f8]"></a>ef_env_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ef_env.o(i.ef_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[1fa]"></a>ef_env_set_default</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ef_env.o(i.ef_env_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>

<P><STRONG><a name="[e9]"></a>ef_get_env_blob</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, ef_env.o(i.ef_get_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Init
</UL>

<P><STRONG><a name="[1f9]"></a>ef_load_env</STRONG> (Thumb, 100 bytes, Stack size 112 bytes, ef_env.o(i.ef_load_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>

<P><STRONG><a name="[1fb]"></a>ef_port_env_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_lock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[1fc]"></a>ef_port_env_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[1fe]"></a>ef_port_erase</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_port.o(i.ef_port_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ef_port_erase &rArr; fal_partition_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1f7]"></a>ef_port_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_port.o(i.ef_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ef_port_init &rArr; fal_partition_find
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[1f2]"></a>ef_port_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ef_port.o(i.ef_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ef_port_read &rArr; fal_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>

<P><STRONG><a name="[1de]"></a>ef_port_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ef_port.o(i.ef_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[ea]"></a>ef_set_env_blob</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ef_env.o(i.ef_set_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_ConfigColor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Buzzer_Init
</UL>

<P><STRONG><a name="[1e7]"></a>fal_flash_device_find</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fal_flash_device_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>

<P><STRONG><a name="[206]"></a>fal_flash_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[205]"></a>fal_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fal.o(i.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; check_and_update_part_cache &rArr; fal_flash_device_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>fal_partition_erase</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fal_partition_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
</UL>

<P><STRONG><a name="[133]"></a>fal_partition_find</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fal_partition_find
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Updata
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Updata
</UL>

<P><STRONG><a name="[207]"></a>fal_partition_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fal_partition.o(i.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fal_partition_init &rArr; check_and_update_part_cache &rArr; fal_flash_device_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[134]"></a>fal_partition_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fal_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Updata
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>

<P><STRONG><a name="[1e2]"></a>fal_partition_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>

<P><STRONG><a name="[1cb]"></a>flash_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task_feedback.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_ProductDate
</UL>

<P><STRONG><a name="[9d]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_common.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = main &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Pro_Handler_Callback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[143]"></a>BSP_Fan_CaptureStart</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_fan.o(i.BSP_Fan_CaptureStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_CaptureStart &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Task
</UL>

<P><STRONG><a name="[141]"></a>BSP_Fan_CaptureStop</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_fan.o(i.BSP_Fan_CaptureStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BSP_Fan_CaptureStop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_CaptureOverflow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Fan_Capture
</UL>

<P><STRONG><a name="[fe]"></a>Read_KeyState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_key.o(i.Read_KeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Read_KeyState &rArr; BSP_ReadKeyValue &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_Task
</UL>

<P><STRONG><a name="[109]"></a>APP_LaserRefresh</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_laser.o(i.APP_LaserRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WritePulse
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteFrequency
</UL>

<P><STRONG><a name="[10c]"></a>APP_LaserRefreshMedical</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_laser.o(i.APP_LaserRefreshMedical))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APP_LaserRefreshMedical &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Frenquency_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WritePulseWidth
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_EnergyReady
</UL>

<P><STRONG><a name="[a]"></a>SendACVoltage</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task_heartbeatmessage.o(i.SendACVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendACVoltage &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>SendDC05Info</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task_heartbeatmessage.o(i.SendDC05Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendDC05Info &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>SendDC12Info</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task_heartbeatmessage.o(i.SendDC12Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendDC12Info &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>SendDCLdInfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task_heartbeatmessage.o(i.SendDCLdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendDCLdInfo &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VoltageDetection_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>SendErrorInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_heartbeatmessage.o(i.SendErrorInfo))
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>SendMosTemperature</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task_heartbeatmessage.o(i.SendMosTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendMosTemperature &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadMosTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SendSafeLockerInfor</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, task_heartbeatmessage.o(i.SendSafeLockerInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendSafeLockerInfor &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadSafeLockerConn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SendVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_heartbeatmessage.o(i.SendVersion))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_heartbeatmessage.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>AC_Console</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, task_console.o(i.AC_Console))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AC_Console &rArr; RingBufferGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEmpty
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferClear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBufferLen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Extract
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_console.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Main_Console</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, task_console.o(i.Main_Console))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Main_Console &rArr; RingBufferGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEmpty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Matching
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_console.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Protect_Console</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, task_console.o(i.Protect_Console))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Protect_Console &rArr; RingBufferGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEmpty
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_Protect_Search
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_console.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>App_GetLaserInfo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task_feedback.o(i.App_GetLaserInfo))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>App_GetVersion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, task_feedback.o(i.App_GetVersion))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_FB_Protect_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>App_ProductDate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_feedback.o(i.App_ProductDate))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>App_SetHandpiecePROT</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, task_feedback.o(i.App_SetHandpiecePROT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_SetHandpiecePROT
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WriteHandpiecePROT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>App_SetKeyDelay</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, task_feedback.o(i.App_SetKeyDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_SetKeyDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_KEY_DelayConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>App_SetLaserCount</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_SetLaserCount &rArr; APP_SetLaserCount &rArr; APP_SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetLaserCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>App_SetLaserFrequency</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_SetLaserFrequency &rArr; APP_Laser_WriteFrequency &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteFrequency
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>App_SetLaserIndicatorPower</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserIndicatorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = App_SetLaserIndicatorPower &rArr; APP_Laser_IndicatorWriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_IndicatorWriteEnergy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>App_SetLaserModeOpt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserModeOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_SetLaserModeOpt &rArr; APP_Laser_WriteMode &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>App_SetLaserNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_feedback.o(i.App_SetLaserNum))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>App_SetLaserPower</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = App_SetLaserPower &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WriteEnergy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>App_SetLaserPulse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = App_SetLaserPulse &rArr; APP_Laser_WritePulse &rArr; APP_LaserRefresh &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WritePulse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>App_SetLaserPulseWidth</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetLaserPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = App_SetLaserPulseWidth &rArr; APP_Laser_WritePulseWidth &rArr; APP_LaserRefreshMedical &rArr; APP_Protect_RefreshPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_WritePulseWidth
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>App_SetLed</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, task_feedback.o(i.App_SetLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = App_SetLed &rArr; APP_LED_AllConfig &rArr; APP_LED_Config &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_ConfigColor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_AllConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>App_SetOverTempPROT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_feedback.o(i.App_SetOverTempPROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>App_SetSafeLockerPROT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, task_feedback.o(i.App_SetSafeLockerPROT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_SetSafeLockerPROT
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WriteSafeLockerPROT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>App_SetSystemReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetSystemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = App_SetSystemReady &rArr; APP_SystemReady &rArr; APP_Laser_EnergyReady &rArr; APP_Laser_WriteEnergy &rArr; BSP_DAC_Config &rArr; HAL_DAC_SetValue &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>App_SetTempTH</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_feedback.o(i.App_SetTempTH))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>App_SetWaterFlowPROT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_feedback.o(i.App_SetWaterFlowPROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>App_SetWorkTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task_feedback.o(i.App_SetWorkTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_SetWorkTime &rArr; APP_SetTime &rArr; APP_SendTime &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>App_SystemReboot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_feedback.o(i.App_SystemReboot))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Feedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>App_Updata</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, task_feedback.o(i.App_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_Updata &rArr; cf_Config_App_Flag &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>Task_FB_GetLaserInfo</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, task_feedback.o(i.Task_FB_GetLaserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_FB_GetLaserInfo &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>Task_FB_GetVersion</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_GetVersion &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>Task_FB_ProductDate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, task_feedback.o(i.Task_FB_ProductDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_FB_ProductDate &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>Task_FB_SetHandpiecePROT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetHandpiecePROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>Task_FB_SetKeyDelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetKeyDelay))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>Task_FB_SetLaserCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task_feedback.o(i.Task_FB_SetLaserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_FB_SetLaserCount &rArr; APP_SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SendLaserCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>Task_FB_SetLaserFrequency</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserFrequency &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadFrequency
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>Task_FB_SetLaserIndicatorPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserIndicatorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserIndicatorPower &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_IndicatorReadEnergy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>Task_FB_SetLaserMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserMode &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadPulseMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Task_FB_SetLaserNum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetLaserNum))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>Task_FB_SetLaserPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserPower &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Laser_ReadEnergy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>Task_FB_SetLaserPulse</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserPulse &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserReadPulse
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>Task_FB_SetLaserPulseWidth</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetLaserPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_FB_SetLaserPulseWidth &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LaserReadPulseWidth
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>Task_FB_SetLed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetLed))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Task_FB_SetOverTempPROT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetOverTempPROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>Task_FB_SetSafeLockerPROT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetSafeLockerPROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>Task_FB_SetSystemReady</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, task_feedback.o(i.Task_FB_SetSystemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Task_FB_SetSystemReady &rArr; APP_Protect_RefreshReady &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_IsSystemReady
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_RefreshReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Task_FB_SetTempTH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetTempTH))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>Task_FB_SetWaterFlowPROT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetWaterFlowPROT))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>Task_FB_SetWorkTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_SetWorkTime))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>Task_FB_SystemReboot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, task_feedback.o(i.Task_FB_SystemReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_FB_SystemReboot &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>Task_FB_Updata</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_feedback.o(i.Task_FB_Updata))
<BR>[Address Reference Count : 1]<UL><LI> task_feedback.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>SendLaserCount</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, task_polityhigh.o(i.SendLaserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendLaserCount &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadLaserCount
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_polityhigh.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>SendTime</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, task_polityhigh.o(i.SendTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendTime &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReadTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_polityhigh.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>Protect_Error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_fb_protect.o(i.Protect_Error))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_WriteErrorCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>Protect_FB_Error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_fb_protect.o(i.Protect_FB_Error))
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>Protect_FB_Updata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_fb_protect.o(i.Protect_FB_Updata))
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>Protect_FB_Version</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, task_fb_protect.o(i.Protect_FB_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Protect_FB_Version &rArr; APP_Send_Data &rArr; BSP_UART_TxDataToID &rArr; BSP_UART_TxStart &rArr; HAL_UART_AbortTransmit &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Send_Data
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_ReadVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>Protect_Updata</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, task_fb_protect.o(i.Protect_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Protect_Updata &rArr; cf_Config_App_Flag &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_Config_App_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>Protect_Version</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, task_fb_protect.o(i.Protect_Version))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Protect_WriteVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_fb_protect.o(.data)
</UL>
<P><STRONG><a name="[1e6]"></a>check_and_update_part_cache</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fal_partition.o(i.check_and_update_part_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_and_update_part_cache &rArr; fal_flash_device_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[208]"></a>flash_device_find_by_part</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_partition.o(i.flash_device_find_by_part))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[b0]"></a>erase</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, fal_flash_stm32_port.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_MassErase &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_stm32_port.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fal_flash_stm32_port.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_stm32_port.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fal_flash_stm32_port.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_stm32_port.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fal_flash_stm32_port.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = write &rArr; HAL_FLASH_Program &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_stm32_port.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>align_write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ef_env.o(i.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = align_write &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1df]"></a>alloc_env</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ef_env.o(i.alloc_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[a5]"></a>alloc_env_cb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ef_env.o(i.alloc_env_cb))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[a8]"></a>check_and_recovery_env_cb</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ef_env.o(i.check_and_recovery_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = check_and_recovery_env_cb &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[a7]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_env.o(i.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[a6]"></a>check_sec_hdr_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_env.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[1e9]"></a>create_env_blob</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, ef_env.o(i.create_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = create_env_blob &rArr; new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[1f0]"></a>del_env</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, ef_env.o(i.del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[ab]"></a>do_gc</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, ef_env.o(i.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[1fd]"></a>env_iterator</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ef_env.o(i.env_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
</UL>

<P><STRONG><a name="[1f1]"></a>find_env</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ef_env.o(i.find_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[a9]"></a>find_env_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ef_env.o(i.find_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_env_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.find_env_no_cache)
</UL>
<P><STRONG><a name="[20b]"></a>find_env_no_cache</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ef_env.o(i.find_env_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[20c]"></a>find_next_env_addr</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, ef_env.o(i.find_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_next_env_addr &rArr; ef_port_read &rArr; fal_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>

<P><STRONG><a name="[1e8]"></a>format_sector</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, ef_env.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = format_sector &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[aa]"></a>gc_check_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ef_env.o(i.gc_check_cb))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[1e5]"></a>gc_collect</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, ef_env.o(i.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
</UL>

<P><STRONG><a name="[20a]"></a>get_env_from_cache</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, ef_env.o(i.get_env_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_env_from_cache &rArr; ef_port_read &rArr; fal_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[1f5]"></a>get_next_env_addr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ef_env.o(i.get_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_next_env_addr &rArr; find_next_env_addr &rArr; ef_port_read &rArr; fal_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[201]"></a>get_next_sector_addr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ef_env.o(i.get_next_sector_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[20d]"></a>get_sector_from_cache</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ef_env.o(i.get_sector_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>

<P><STRONG><a name="[1f3]"></a>get_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ef_env.o(i.get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
</UL>

<P><STRONG><a name="[1e3]"></a>move_env</STRONG> (Thumb, 252 bytes, Stack size 168 bytes, ef_env.o(i.move_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[1eb]"></a>new_env</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ef_env.o(i.new_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = new_env &rArr; alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[1f4]"></a>read_env</STRONG> (Thumb, 218 bytes, Stack size 104 bytes, ef_env.o(i.read_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[200]"></a>read_sector_meta_data</STRONG> (Thumb, 326 bytes, Stack size 160 bytes, ef_env.o(i.read_sector_meta_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[1e0]"></a>sector_iterator</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ef_env.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>

<P><STRONG><a name="[a4]"></a>sector_statistics_cb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ef_env.o(i.sector_statistics_cb))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[1ff]"></a>set_env</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ef_env.o(i.set_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
</UL>

<P><STRONG><a name="[20e]"></a>set_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ef_env.o(i.set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1ef]"></a>update_env_cache</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ef_env.o(i.update_env_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_env_cache &rArr; ef_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[1ec]"></a>update_sec_status</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ef_env.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = update_sec_status &rArr; write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[1ee]"></a>update_sector_cache</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ef_env.o(i.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1e4]"></a>write_status</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ef_env.o(i.write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = write_status &rArr; ef_port_write &rArr; fal_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[175]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[185]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[17d]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[169]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[166]"></a>FLASH_MassErase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FLASH_MassErase &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[195]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1a5]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TIM_OC1_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TIM_OC3_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TIM_OC4_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[193]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[194]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[199]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[18d]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>

<P><STRONG><a name="[a3]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a1]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a2]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[1d7]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1d6]"></a>UART_EndTxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1af]"></a>UART_SetConfig</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UART_SetConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b2]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[9c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
